name: Java CICD Templete1

on: 
  push:
    branches: 
      - master
#    paths:
#      - 'poc2/MANIFEST.MF'

env:
  AWS_REGION:             "ap-northeast-1"
  AWS_ROLE_ARN:           "arn:aws:iam::933432669293:role/github-komi-role3"
  AWS_SESSION_NAME:       "github-actions-session"
  ECS_TASK_DEFINITION:    ".aws/taskdef_dev.json"
  ECR_REPOSITORY:         "ecr-komi-test02"

  ECS_CLUSTER:            "ecs-cluster-t-komi-01"
  ECS_SERVICE:            "ecs-service-t-komi-03"
  CONTAINER_NAME:         "tomcat"

  PUBLIC_ECR_AWS_ACCOUNT: "533994313413"
  APP_ECR_AWS_ACCOUNT:    "933432669293"
  MODULE: "poc2"

  CODE_DEP_APPSPEC:       ".aws/appspec_dev.yml"
  CODE_DEP_APP:           "AppECS-ecs-cluster-t-komi-01-ecs-service-t-komi-03"
  CODE_DEP_GRP:           "DgpECS-ecs-cluster-t-komi-01-ecs-service-t-komi-03"

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: setup jdk 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: 'maven'

      - name: build with maven
        run: mvn --batch-mode --update-snapshots verify --file ${{env.MODULE}}/pom.xml

#      - name: copy staging
#        run: mkdir staging && cp ${{env.MODULE}}/target/*.war staging
#
#      - name: upload-artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: Package
#          path: staging

      - name: aws-login
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume:    ${{env.AWS_ROLE_ARN}}
          role-session-name: ${{env.AWS_SESSION_NAME}}
          aws-region:        ${{env.AWS_REGION}}

      - name: ecr-login1
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr # outputs で参照するために id を設定
        with:
          registries: ${{env.APP_ECR_AWS_ACCOUNT}}


      - name: ecr-login2
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{env.PUBLIC_ECR_AWS_ACCOUNT}}


#      - name: build and push docker image to ecr
#        env:
#          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          IMAGE_TAG: ${{ github.sha }}
#        run: |
#          docker build . --tag ${{ env.REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
#          docker push ${{ env.REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
#      - run: |
#          echo $GITHUB_WORKSPACE

       #docker/build-push-actionを使用する場合ecr:BatchGetImageが必要
      - name: build and push docker image to ecr
        id: build-image
        uses: docker/build-push-action@v6
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        with:
          context: ${{ github.workspace }}
          file: ${{env.MODULE}}/Dockerfile
          tags: ${{ env.REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          push: true

      - name: render new task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{env.MODULE}}/${{env.ECS_TASK_DEFINITION}}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

      - name: deploy ecs task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          codedeploy-appspec: ${{env.MODULE}}/${{env.CODE_DEP_APPSPEC}}
          codedeploy-application: ${{env.CODE_DEP_APP}}
          codedeploy-deployment-group: ${{env.CODE_DEP_GRP}}
          wait-for-service-stability: true




